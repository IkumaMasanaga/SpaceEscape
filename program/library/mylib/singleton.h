/*
* ====================================================================================================
* 
* シングルトンクラスのテンプレート
* 
* このクラスを継承し、継承先のクラス名をテンプレート引数に指定
* Singleton<継承先のクラス名> を friend に指定
* コンストラクタを private に、デストラクタを public に指定
* 
* ====================================================================================================
*/

#pragma once
#include <memory>


namespace mylib {

	template<class T>
	class Singleton {
	private:

		//====================================================================================================
		// コピー、代入の禁止
		Singleton(const Singleton&) = delete;
		Singleton& operator = (const Singleton&) = delete;

		//====================================================================================================
		// 唯一のインスタンス
		static T* instance_;

	protected:

		//====================================================================================================
		// 派生先で生成できるように保護指定
		Singleton() {}
		virtual ~Singleton() {}

	public:

		//====================================================================================================
		// シングルトンなインスタンスの取得
		inline static T& getInstance() {
			if (!instance_) {
				instance_ = new T();
			}
			return *instance_;
		}

		//====================================================================================================
		// シングルトンなインスタンスの明示的削除
		inline static void destroy() {
			if (!instance_) return;
			delete instance_;
			instance_ = nullptr;
		}

	};

	template<class T> T* Singleton<T>::instance_ = nullptr;

}
